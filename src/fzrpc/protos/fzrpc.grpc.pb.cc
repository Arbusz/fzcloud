// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fzrpc.proto

#include "fzrpc.pb.h"
#include "fzrpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* FzService_method_names[] = {
  "/FzService/RemoteCall",
};

std::unique_ptr< FzService::Stub> FzService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FzService::Stub> stub(new FzService::Stub(channel));
  return stub;
}

FzService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RemoteCall_(FzService_method_names[0], grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FzService::Stub::RemoteCall(::grpc::ClientContext* context, const ::FzRequest& request, ::FzResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoteCall_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::FzResponse>* FzService::Stub::AsyncRemoteCallRaw(::grpc::ClientContext* context, const ::FzRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::FzResponse>(channel_.get(), cq, rpcmethod_RemoteCall_, context, request);
}

FzService::Service::Service() {
  AddMethod(new grpc::internal::RpcServiceMethod(
      FzService_method_names[0],
      grpc::internal::RpcMethod::NORMAL_RPC,
      new grpc::internal::RpcMethodHandler< FzService::Service, ::FzRequest, ::FzResponse>(
          std::mem_fn(&FzService::Service::RemoteCall), this)));
}

FzService::Service::~Service() {
}

::grpc::Status FzService::Service::RemoteCall(::grpc::ServerContext* context, const ::FzRequest* request, ::FzResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


