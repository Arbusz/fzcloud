// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fzrpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fzrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FzRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FzRequest> {
} _FzRequest_default_instance_;
class FzResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FzResponse> {
} _FzResponse_default_instance_;

namespace protobuf_fzrpc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzRequest, jobid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzRequest, cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzResponse, jobid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzResponse, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzResponse, ret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FzResponse, cmd_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FzRequest)},
  { 6, -1, sizeof(FzResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FzRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FzResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fzrpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _FzRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _FzResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FzRequest_default_instance_.DefaultConstruct();
  _FzResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013fzrpc.proto\"\'\n\tFzRequest\022\r\n\005jobID\030\001 \001("
      "\r\022\013\n\003cmd\030\002 \001(\t\"C\n\nFzResponse\022\r\n\005jobID\030\001 "
      "\001(\r\022\014\n\004flag\030\002 \001(\010\022\013\n\003ret\030\003 \001(\t\022\013\n\003cmd\030\004 "
      "\001(\t22\n\tFzService\022%\n\nRemoteCall\022\n.FzReque"
      "st\032\013.FzResponseb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 183);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fzrpc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fzrpc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FzRequest::kJobIDFieldNumber;
const int FzRequest::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FzRequest::FzRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fzrpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FzRequest)
}
FzRequest::FzRequest(const FzRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  jobid_ = from.jobid_;
  // @@protoc_insertion_point(copy_constructor:FzRequest)
}

void FzRequest::SharedCtor() {
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobid_ = 0u;
  _cached_size_ = 0;
}

FzRequest::~FzRequest() {
  // @@protoc_insertion_point(destructor:FzRequest)
  SharedDtor();
}

void FzRequest::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FzRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzRequest::descriptor() {
  protobuf_fzrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fzrpc_2eproto::file_level_metadata[0].descriptor;
}

const FzRequest& FzRequest::default_instance() {
  protobuf_fzrpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FzRequest* FzRequest::New(::google::protobuf::Arena* arena) const {
  FzRequest* n = new FzRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FzRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:FzRequest)
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobid_ = 0u;
}

bool FzRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FzRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 jobID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FzRequest.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FzRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FzRequest)
  return false;
#undef DO_
}

void FzRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FzRequest)
  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jobid(), output);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzRequest.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:FzRequest)
}

::google::protobuf::uint8* FzRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FzRequest)
  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jobid(), target);
  }

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzRequest.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FzRequest)
  return target;
}

size_t FzRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FzRequest)
  size_t total_size = 0;

  // string cmd = 2;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->jobid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FzRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FzRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FzRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FzRequest)
    MergeFrom(*source);
  }
}

void FzRequest::MergeFrom(const FzRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.jobid() != 0) {
    set_jobid(from.jobid());
  }
}

void FzRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzRequest::CopyFrom(const FzRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzRequest::IsInitialized() const {
  return true;
}

void FzRequest::Swap(FzRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FzRequest::InternalSwap(FzRequest* other) {
  cmd_.Swap(&other->cmd_);
  std::swap(jobid_, other->jobid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FzRequest::GetMetadata() const {
  protobuf_fzrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fzrpc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FzRequest

// uint32 jobID = 1;
void FzRequest::clear_jobid() {
  jobid_ = 0u;
}
::google::protobuf::uint32 FzRequest::jobid() const {
  // @@protoc_insertion_point(field_get:FzRequest.jobID)
  return jobid_;
}
void FzRequest::set_jobid(::google::protobuf::uint32 value) {
  
  jobid_ = value;
  // @@protoc_insertion_point(field_set:FzRequest.jobID)
}

// string cmd = 2;
void FzRequest::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FzRequest::cmd() const {
  // @@protoc_insertion_point(field_get:FzRequest.cmd)
  return cmd_.GetNoArena();
}
void FzRequest::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FzRequest.cmd)
}
#if LANG_CXX11
void FzRequest::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FzRequest.cmd)
}
#endif
void FzRequest::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FzRequest.cmd)
}
void FzRequest::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FzRequest.cmd)
}
::std::string* FzRequest::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:FzRequest.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FzRequest::release_cmd() {
  // @@protoc_insertion_point(field_release:FzRequest.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FzRequest::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:FzRequest.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FzResponse::kJobIDFieldNumber;
const int FzResponse::kFlagFieldNumber;
const int FzResponse::kRetFieldNumber;
const int FzResponse::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FzResponse::FzResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fzrpc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FzResponse)
}
FzResponse::FzResponse(const FzResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ret().size() > 0) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cmd().size() > 0) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  ::memcpy(&jobid_, &from.jobid_,
    reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&jobid_) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:FzResponse)
}

void FzResponse::SharedCtor() {
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jobid_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&jobid_) + sizeof(flag_));
  _cached_size_ = 0;
}

FzResponse::~FzResponse() {
  // @@protoc_insertion_point(destructor:FzResponse)
  SharedDtor();
}

void FzResponse::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FzResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FzResponse::descriptor() {
  protobuf_fzrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fzrpc_2eproto::file_level_metadata[1].descriptor;
}

const FzResponse& FzResponse::default_instance() {
  protobuf_fzrpc_2eproto::InitDefaults();
  return *internal_default_instance();
}

FzResponse* FzResponse::New(::google::protobuf::Arena* arena) const {
  FzResponse* n = new FzResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FzResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:FzResponse)
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&jobid_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&jobid_) + sizeof(flag_));
}

bool FzResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FzResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 jobID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool flag = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ret = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FzResponse.ret"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string cmd = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FzResponse.cmd"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FzResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FzResponse)
  return false;
#undef DO_
}

void FzResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FzResponse)
  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->jobid(), output);
  }

  // bool flag = 2;
  if (this->flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // string ret = 3;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzResponse.ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret(), output);
  }

  // string cmd = 4;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzResponse.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cmd(), output);
  }

  // @@protoc_insertion_point(serialize_end:FzResponse)
}

::google::protobuf::uint8* FzResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FzResponse)
  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->jobid(), target);
  }

  // bool flag = 2;
  if (this->flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // string ret = 3;
  if (this->ret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzResponse.ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret(), target);
  }

  // string cmd = 4;
  if (this->cmd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FzResponse.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmd(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FzResponse)
  return target;
}

size_t FzResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FzResponse)
  size_t total_size = 0;

  // string ret = 3;
  if (this->ret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret());
  }

  // string cmd = 4;
  if (this->cmd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  // uint32 jobID = 1;
  if (this->jobid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->jobid());
  }

  // bool flag = 2;
  if (this->flag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FzResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FzResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FzResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FzResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FzResponse)
    MergeFrom(*source);
  }
}

void FzResponse::MergeFrom(const FzResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ret().size() > 0) {

    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.cmd().size() > 0) {

    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  if (from.jobid() != 0) {
    set_jobid(from.jobid());
  }
  if (from.flag() != 0) {
    set_flag(from.flag());
  }
}

void FzResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FzResponse::CopyFrom(const FzResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FzResponse::IsInitialized() const {
  return true;
}

void FzResponse::Swap(FzResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FzResponse::InternalSwap(FzResponse* other) {
  ret_.Swap(&other->ret_);
  cmd_.Swap(&other->cmd_);
  std::swap(jobid_, other->jobid_);
  std::swap(flag_, other->flag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FzResponse::GetMetadata() const {
  protobuf_fzrpc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fzrpc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FzResponse

// uint32 jobID = 1;
void FzResponse::clear_jobid() {
  jobid_ = 0u;
}
::google::protobuf::uint32 FzResponse::jobid() const {
  // @@protoc_insertion_point(field_get:FzResponse.jobID)
  return jobid_;
}
void FzResponse::set_jobid(::google::protobuf::uint32 value) {
  
  jobid_ = value;
  // @@protoc_insertion_point(field_set:FzResponse.jobID)
}

// bool flag = 2;
void FzResponse::clear_flag() {
  flag_ = false;
}
bool FzResponse::flag() const {
  // @@protoc_insertion_point(field_get:FzResponse.flag)
  return flag_;
}
void FzResponse::set_flag(bool value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:FzResponse.flag)
}

// string ret = 3;
void FzResponse::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FzResponse::ret() const {
  // @@protoc_insertion_point(field_get:FzResponse.ret)
  return ret_.GetNoArena();
}
void FzResponse::set_ret(const ::std::string& value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FzResponse.ret)
}
#if LANG_CXX11
void FzResponse::set_ret(::std::string&& value) {
  
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FzResponse.ret)
}
#endif
void FzResponse::set_ret(const char* value) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FzResponse.ret)
}
void FzResponse::set_ret(const char* value, size_t size) {
  
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FzResponse.ret)
}
::std::string* FzResponse::mutable_ret() {
  
  // @@protoc_insertion_point(field_mutable:FzResponse.ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FzResponse::release_ret() {
  // @@protoc_insertion_point(field_release:FzResponse.ret)
  
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FzResponse::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    
  } else {
    
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:FzResponse.ret)
}

// string cmd = 4;
void FzResponse::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FzResponse::cmd() const {
  // @@protoc_insertion_point(field_get:FzResponse.cmd)
  return cmd_.GetNoArena();
}
void FzResponse::set_cmd(const ::std::string& value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FzResponse.cmd)
}
#if LANG_CXX11
void FzResponse::set_cmd(::std::string&& value) {
  
  cmd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FzResponse.cmd)
}
#endif
void FzResponse::set_cmd(const char* value) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FzResponse.cmd)
}
void FzResponse::set_cmd(const char* value, size_t size) {
  
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FzResponse.cmd)
}
::std::string* FzResponse::mutable_cmd() {
  
  // @@protoc_insertion_point(field_mutable:FzResponse.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FzResponse::release_cmd() {
  // @@protoc_insertion_point(field_release:FzResponse.cmd)
  
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FzResponse::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    
  } else {
    
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:FzResponse.cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
